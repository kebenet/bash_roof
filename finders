#!/bin/bash
#FILE! search functions


where(){
	item=$(which "${1}")
	if [[ $2 == "." ]]; then
		symbol "${item}"
	else
		st open "$item"
		varm append_recents "${item}" 'sub_recent_files' 
	fi
}


find_sublime_cmd(){
	cat "$TT_SUBLIME_CMD" | fzy -q "$1" 
}

find_bash_path(){

	prent="([{]([A-Za-z_\-]+)[}])"
	subs='(/([a-zA-Z_0-9\-\.]+))+'

	rg "($prent$subs)" --max-depth 3 --hidden
	# "$TT_BASH/.bash_aliases"

}

find_var_path(){

	cd "$TT_PATTERN" || return 7
	items=$(fd . -H -x echo |cut -d. -f1)

	for item in $items; do
		rg "\b${item}\b" "$TT_BASH"
	done

}


symbol(){

	view="$(get_var 'subl_active_view')"
	
	if [ -f "$1" ]; then
		view="${1}"
	fi

	item=$(rg "^([.]?\w+|\w+)" -n "${view}" |fzy)
	echo ${item}
	index="$(echo $item | cut -d ':' -f 1)"
	st open_line "$view" "$index"

}


apt_search_list(){

	#CODE! combine 2 line into single line awk
	apt search "$1" | awk 'NR%2{printf "%s ", $0; next} 1' | fzy
	
}

code_python(){

	[ ! "$1" ] && echo "Cannot Empty Query!" && return 7
	cd $TT_PACKAGES
	
	var="$@"
	item="${var// /.*?}"
	nospace="$(tr -d ' '  <<< $@)"

	echo 'Regexs: ' "$item"

	_rgcode "$item" -t py\
	| fzy -e "$nospace" | fzy -q "$nospace"

	# item="$(tr -d ' ' <<< $@)"
	# fd . -t f -H -e py -x cat | warp trim | fzy -e "$item" | fzy
	
}

find_shell_files(){
	#TODO: just use after context 2 line
	rg '#!/bin/(bash|sh)' --fixed-strings --files-with-matches --after-context 7 $TT_BASH 
}


code_comment(){

	dirs="$2"
	
	show_msg2 "FindAt" "PWD_PROJECT or 2nd args as dir to search"

	if [ ! -d "$dirs" ]; then
		dirs="$(get_var 'PWD_PROJECT')"
	fi

	reg="^\s*#([A-Z]+!)"

	# echo "$dirs"

	#CODE! rg find code with full option name + rargs
	rg "${reg}" --no-filename --no-line-number --trim \
		--max-depth 2 "$dirs" | fzy \
		| rargs rg {0} \
		--no-filename --no-line-number \
		--fixed-strings --after-context 7 "$dirs"

}


symbols_bash(){

	dirs="$(get_var 'PWD_PROJECT')"
	
	show_msg2 "." "to search at Current PWD"

	if [[ $1 == "." ]]; then
		dirs="$PWD"	
	fi

	if [ ! "${number}" ]; then
		show_msg2 "Add Count" "to show matxh line count"
		number=7
	fi

	item=$({
	        declare -F | awk '{print $3}'
	        export | cut -d "=" -f 1 | awk '{print "@"$3}'
	    } | fzy)

	if [ ! "${item}" ]; then
		show_msg2 "CANCEL" "Operation..."
		return 7
	fi

	reg="^$item"

	if [[ $item == "@"* ]]; then
		# export
		item=$(echo "$item" | cut -c 2-)
		reg="^(export ${item})"
	fi
	

    rg "$reg"  -N --follow --max-depth 3 --hidden \
		--after-context 7 "$dirs"

}



find_code(){

	folder="$PWD"

	if [[ $1 == "." ]]; then
		shift
	else
		folder="$TT_BASH"
	fi

	[ ! "${1}" ] && echo "Cannot Empty Query!" && return 7

	arg="$@"
	item="${arg// /.*?}"
	echo ${item}

	_rgcode "($item)" "$RGOPT" "$folder" | fzy -q "$1" 

}

find_code_rg(){

	[ ! "$1" ] && echo "Cannot Empty Query!" && return 7
	
	cd $TT_BASH
	var="$@"
	item="${var// /.*?}"
	nospace="$(tr -d ' '  <<< $@)"

	echo ${item}
	_rgcode "($item)" \
	| fzy -e "$nospace" | fzy -q "$nospace"
}

view_code(){

	[ ! "$1" ] && echo "Cannot Empty Query!" && return 7
	
	var="$@"
	item="${var// /.*?}"
	nospace="$(tr -d ' '  <<< $@)"

	echo "$item"
	_rgcode "($item)" \
	| fzy -e "$nospace" | fzy -q "$nospace"
}

find_github_code() {

    search_string=$1
    language=$2

    #CODE! Replace spaces in the search string with '+'
    search_string=${search_string// /+}

    # Open the search results in a web browser
    open "https://github.com/search?q=$search_string+language:$language&type=code"

}

find_elv_help(){

    elv="https://elv.sh"
    base="$TT_ELVISH_DOC"
    reff="$XDG_CONFIG_HOME/elvish/elvish-doc/elvish_docs.md"

    url=$(cat "$reff" | fzy)
    www-browser "${elv}/${url}"

}

cheat(){

    export LANG="bash"
    show_msg2 "FIND_CODE"  "search anyting"
    show_msg2 "Options -l"  "change language"

    if [[ ${1} == "-l" ]]; then
    	export LANG="$2"
      	show_msg2 "Set lang" "to $2"
      return
    fi
    
    item=$(echo "${@}" | tr ' ' '+')
    [ ! "${item}" ] && echo "empty string. cancels.." && return 7
    
    curl "cheat.sh/${LANG}/${item}"

}

find_python(){

	dirs="$(get_var 'PWD_PROJECT')"
	cd $dirs
	ptn="^class"
	item=$(rg "$ptn" --no-heading -Hn -t py  | fzy)

	filename=$(echo "$item" | awk -F ':' '{print $1}')
	line=$(echo "$item" | awk -F ':' '{print $2}')
	match=$(echo "$item" | awk -F ':' '{print $3}')

	echo "Filename: $filename"
	echo ""
	return
	# must add 1 
	line=$((line + 1))


	#CODE! get second line after match using sed & rg
	item2=$(sed -n "${line},\$p" "$filename" | \
			rg -m 1  --no-heading -Hn "${ptn}")

	echo "${item2}"


	line2=$(echo "$item2" | awk -F ':' '{print $2}')

	# adjust more
	line=$((line -1))
	line2=$((line + line2-1))


	sed -n "${line},"${line2}"p" "$filename"
	return
	# data=$(sed -n "${line},"${line2}"p" "$filename")

	#CODE! delete original lines
	sed -i "${line},${line2}d" "$filename"

	#CODE! Append new data At 1st line index
	awk -v n=$line -v s="$data" 'NR == n {print s} {print}' \
	"$filename" > "$TT_TEMP" && mv "$TT_TEMP" "$filename"

	_line_opento_change "${data}"

}

open_bash_symbol(){

	# dirs="$(get_var 'PWD_PROJECT')"
	dirs="$PWD"

	item=$({
	        declare -F | awk '{print $3}'
	        export | cut -d "=" -f 1 | awk '{print "@"$3}'
	    } | fzy)

	if [ ! "${item}" ]; then
		show_msg2 "CANCEL" "Operation..."
		return 7
	fi

	reg="^${item}"

	if [[ $item == "@"* ]]; then
		# export
		item=$(echo "$item" | cut -c 2-)
		reg="^(export ${item})"
	fi

    found=$(rg "${reg}" -n --max-depth 3 --hidden --no-heading --max-count 1 "$dirs") 

    echo "$found" | rargs -d: st open_line "{1}" "{2}"

}

_rgcode(){
	rg "$1" --no-filename --no-line-number --trim -i
}

setrg(){

	# chose line by fzy
	item="$(list_var 'RG_list' | fzy)"

	export RG_options="$item"

}

runrg(){

	[ ! "${1}" ] && echo "Cannot Empty Query!" && return 7
	
	var="$@"
	item="${var// /.*?}"
	nospace="$(tr -d ' '  <<< $@)"

	echo ${item}
	
	rg "$item" $RG_options #| fzy -q "$nospace"

}
