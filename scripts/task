#!/bin/bash

dbfile="$BARTIB_FILE"
THEFILE="$TT_VAR/tree_structure.ttdb"
play_file="$TT_BASH/scripts/._task_terabo.yaml"
SAPERATOR="TASK-RECORD"
PRJ_SEP='[+] Project'
CANCEL=7


fn_load() {	# search & view LAST Play item

	item=$(rg "^[+] ${SAPERATOR}" "$THEFILE" | tool cut 2 | warp num |fzy)
	idx=`echo $item | tool cut 1`

	item=$(rg "^[+] ${SAPERATOR}" -n  "$THEFILE" | tool line "$idx")

	_load_record "$item"

}


fn_ls() {	# search & view LAST Play item

	item=$(rg "^[+] ${SAPERATOR}" "$THEFILE")

	_list_task | column -t -s ':' | warp head ' -:' | color

}

fn_last() {	# search & view LAST Play item

	item=$(rg "^[+] ${SAPERATOR}" -n  "$THEFILE" | tail -n 1)

	_load_record "$item"

	# bartip start/stop

}


_load_record(){
	item="$1"
	line=`echo "$item"  | tool cut 1`
	title=`echo "$item" | tool cut 3`
	id=`echo "$item" | tool cut 4 | tool trim`

	_write_head "$title" "$id"
	_get_record "$line" >> "$play_file"

	st reload "$play_file"
}


fn_new(){	# starts a new activity

	color 'Save Current: File ?'
	if confirm ;then fn_save; fi

	[ "$CANCEL" -eq 0 ] && exit 7

	_write_head
	echo -e "\t- Task : " >> "$play_file"
	echo

	st reload "$play_file"

}

_write_head(){

	title="$1"
	thedate="$2"
	[ -z "$thedate" ] && thedate=$(date +%s)

	{
		echo "- WELCOME : TERABO Task .Inc : $thedate"
		echo -e "# Title : $title"
	} > "$play_file"

	# information write
	_write_info

	echo "+ Project : $(_get_git_dir)" >> "$play_file"

}


_write_info(){

	title="$1"
	{
		echo
		echo "+ Info : coming soon.."
		echo
	} >> "$play_file"
}


fn_update() {	# updates task item into db

	id=`tool line 1 "$play_file" | tool cut 3 | tool trim`
	num=`rg "$id" -nF "$THEFILE" | tool cut 1`

	end=$(range delete_until "$num" "^[+] $SAPERATOR" "$THEFILE" | wc -l)
	end=$((num+end))
	# echo $num $end
	# exit
	range delete $num $end "$THEFILE"

	title=`tool line 2 "$play_file" | tool cut 2- | tool trim`
	play_line=`rg "^${PRJ_SEP}" -nm 1 "$play_file" | tool cut 1`

	newdata=$(
		echo "+ ${SAPERATOR} : $title : $id"
		awk "NR>=$play_line {print}" "$play_file" | awk 'NF'
	)

	range insert "$num" "$newdata" "$THEFILE" > "$TT_TEMP"
	mv "$TT_TEMP" "$THEFILE"

}

fn_save() {	# save task item into db with title
	local title=$(_ensure_title)

	id=`_get_date_id`

	line=`rg "^${PRJ_SEP}" -nm 1 "$play_file" | tool cut 1`
	{
		echo "+ ${SAPERATOR} : $title : $id"
		awk "NR>=$line {print}" "$play_file" | awk 'NF'
	} >> "$THEFILE"

}

_get_date_id(){
	id=$(tool line 1 "$play_file" |  tool cut 3 | tool trim)
	if [ -z "$id" ]; then
		color 'ERROR : date ID not found! : play_file'
	fi
	echo "$id"
}

_ensure_title(){
	# local title
	_title=$(tool line 2 "$play_file")

	if [[ $_title == '# Title'* ]]; then

		_title=`echo $_title | tool cut 2- | tool triml`

		if [ -z "$_title" ]; then
			read -rp "title ‚ùØ " title
			[ -z "$title" ] && CANCEL=0 && exit 7

		else
			title="$_title"
		fi

	fi
	echo "$title"
}


_new(){	# starts a new activity

	[ -z "$2" ] && echo "On must defind Description" && exit 7
	[ -z "$3" ] && echo "On must defind project Name" && exit 7

	bartib start -d "$2" -p "$3"

}

fn_on(){	# starts a new activity
	[ -z "$2" ] && echo "Remember to use Number to On activity"
	bartib continue "${2:-0}"
}

fn_off(){	# stops all currently running activities
	bartib stop
}

fn_cancel(){	# cancels all currently running activities
	bartib cancel

}

fn_edit(){	# opens the activity log in an editor
	st open "$BARTIB_FILE"
}

fn_check(){	# checks file and reports parsing errors
	bartib check
}

fn_resume(){	# continues a previous activity
	bartib continue "${2:-0}"
}

_last(){	# displays the descriptions and projects of recent activities
	bartib last
}

_ls(){	# list recent activities by Date | Name Date
	bartib list --today
}

fn_yesterday(){	# list recent activities by yesterday
	bartib list --yesterday
}

fn_week(){	# list recent activities by week
	bartib list --current_week
}

fn_lsc(){	# lists all currently running activities
	bartib current
}

fn_lsp(){	# list all projects
	bartib projects
}

fn_report(){	# reports duration of tracked activities
	bartib report
}


fn_db() {	# Open Play Database file
	st open "$THEFILE"
}

fn_sub() {	# Open Play file
	st open "$play_file"
}


# private ______

_get_git_dir(){
	realpath $(git rev-parse --git-dir) | tool lastf '/' ||
	echo $(basename $PWD)
}


_search() {

	item=$(rg "^[+] ${SAPERATOR}" -n  "$THEFILE"| sd "[+] ${SAPERATOR}" "" \
	| cut -d: -f 1,2| fzy)
	_get_record "$item"
}

_get_record() {

	line="$1"
	[ -z "$line" ] && color "Error: empty line: Range" && exit 7
	line=$((line+1))
	range until $line "^[+] $SAPERATOR" "$THEFILE"

}
_list_task(){
	item=$(rg "^[+] ${SAPERATOR}" "$THEFILE")
	echo "$item" | tool cut 2-
}


"fn_$1" "$@" 