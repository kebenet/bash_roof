#!/bin/bash
#FILE! Bash Templates 

fn_symbols(){
	shift
	# sample symbol, get_var, workon
	#CODE! this is holdon_que symbol

	dirs="$(get_var 'PWDPROJECT')"

	for i in "$@"; do
		echo "${files}" | fzy -e "$i" | head -n 1 | \
		xargs -I {} echo '"'"{}"'",'
	done

	item=$({
	        declare -F | awk '{print $3}'
	        export | cut -d "=" -f 1 | awk '{print "@"$3}'
	    } | fzy)

	dirs="$(get_var 'PWDPROJECT')"

	item=$({
	        declare -F | awk '{print $3}'
	        export | cut -d "=" -f 1 | awk '{print "@"$3}'
	    } | fzy)

	if [ ! "${item}" ]; then
		message "CANCEL: Operation..."
		return 7
	fi

	reg="^${item}"

	if [[ $item == "@"* ]]; then
		# export
		item=$(echo "$item" | cut -c 2-)
		reg="^(export ${item})"
	fi

    found=$(rg "${reg}" -n --max-depth 3 --hidden --no-heading --max-count 1 "$dirs") 

    echo "$found" | rargs -d: st open_line "{1}" "{2}"
}

fn_ls(){	# list files
	fd . -t f -d 2 -H
}

fn_adds(){
	shift
	list="$(_to_jsonlist $@)"

	echo ${list}
	exit

	st "open_session" "${list}"
}

_to_args(){
	echo input.txt | jq -Rn '{ "args": (inputs | select(. != "")) }'
}

_to_jsonlist(){

	PWDP="$PWD"
	
	echo ${PWDP}

	item=$(fd . -t f -d 3 -H )
	[ ! "${item}" ] && echo 'Canceling...' && return 7

	{
		echo "["
		for i in "$@"; do
			echo "${item}" | fzy -e "$i" | head -n 1 | \
			xargs -I {} echo '"'"{}"'",'
		done
		echo "]"
	} | tr '\n' ' '

}

fn_open(){

	message "OPEN: JUMP File"
	jumpfile="${TT_VAR}/jump_files.ttpath"

    item="$(_select_file ${jumpfile})"
	
	st open "${item}"
    echo ${item}

}

_select_file(){

    index=$(cat "${1}"| awk -F'/' '{print NR ": " $(NF-1) "/" $(NF)}' | fzy | cut -d: -f1) 

     if [ ! "${item}" ]; then
    	awk "NR==${index}" "${1}"
    else
    	message "USER: Cancel Operations"
    	exit 7
    fi

}

fn_thelp(){
	message "open:JUMP File"
	message "adds: files session to list"
	message "OPEN: JUMP File"
	message "OPEN: JUMP File"
	message "OPEN: JUMP File"
}

"fn_$1" "$@"