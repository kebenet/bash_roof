#!/bin/bash
#TITLE! find multiple pattern using rg ripgrep

# max count 1 all but not 1st

do_match2() {
    local colors=("green" "cyan" "red" "green" "white")
    local command="rg \"$1\" -n --color=always --colors match:fg:${colors[0]}"

    for ((i = 1; i < $#; i++)); do
        command+=" | rg \"\$$((i+1))\" --color=always --colors match:fg:${colors[$i]}"
    done
    eval "$command"
}

do_nocolor2() {
    local command="rg \"$1\" -n --color=never"

    for ((i = 1; i < $#; i++)); do
        command+=" | rg \"\$$((i+1))\" --color=never"
    done
    eval "$command"
}


check_refactor(){
	
	if [ ! -e "$TT_Refactor" ] || [ ! -s "$TT_Refactor" ]; then
		color 'refactor file: is empty'
		color "Usage: ripg find anything | sd 'replace' 'things' | ripg --save"
		exit 7
	fi

	gitcount=$(gitt ls | wc -l)
	if [ $gitcount -gt 0 ]; then
		color 'we have Uncommit files: continue before replacement?'
		if ! confirm; then color 'User: cancel...'; exit 7; fi
	fi

}

do_replace(){
	check_refactor

	local allfile

	while read -r line; do
		item="$line"
		thefile=$(echo "$item" | tool cut 1)
		index=$(echo "$item" | tool cut 2)
		value=$(echo "$item" | tool cut 3)

		echo "processing $thefile: at $index"
		range change "$index" "$value" "$thefile"
		allfile+="$thefile "

	done < "$TT_Refactor"
	
	echo "$allfile" | tool seenspace | warp head 'gitt add '
	# show confirm 'Confirm: to: Proceed'

}

do_save(){
	cat | fzy  #> "$TT_Refactor"
	[ -f "$TT_Refactor" ]&& color 'Done Saved!: ripg --run to refactor'
}


do_list(){
	[ -e "$TT_Refactor" ] && cat "$TT_Refactor"
	color 'Usage: ripg --run to refactor'
}


len="$#"
[ $len -eq 0 ]&& exit 7

case $1 in

  '-n' | '--no-color') 
		shift
		len=$((len-1))
		do_nocolor2 "$@"
	;;

  '-r'| '--run') do_replace ;;
  '-s'| '--save') do_save ;;
  '-l'| '--list') do_list ;;
  '-'*) echo error unknown options ;;

  *) do_match2 "$@";;
esac

