#!/bin/bash
#TITLE! read tab as tree for editing

thefile="$TT_VAR/tree_structure.ttdb"
topindex=$(rg -n "^#\s\w+" "$thefile" | cut -d: -f1| tr '\n' ' '| warp trim)
tree_varname='tree_info'
tree_info=$(varmem get "$tree_varname")
# tabchar=

IFS=: read -r active_index selected_top tabcount tabline <<< "$tree_info"

save_var(){
	item="${active_index:-1}:${selected_top:-1}:${tabcount:-1}:${tabline:-1}"
	varmem set "$tree_varname" "$item"
}

show(){

	last=${!#}
	[[ ! $last =~ ^[0-9]+$ ]] && active_index=1
	
	set_selected

	# title
	item=$(sed -n "${selected_top}p;${selected_top}q" "$thefile")
	color --faint "$item"

	index=$(rg -n "^$item" "$thefile" | cut -d: -f1)

	index=$((index+1))

	# show by title and tab index
	showby_index $index
}



showby_index(){
	range print "$1" '$' "$thefile" | 
	awk -v count="$tabcount" -F'\t' '{if(NF!=count+1) exit; print $0}'
}



#=================print!=================

print_main(){	# get same level, no exit
	index=$((selected_top))
	index=1



	# how to manage awk script

}

print_topindex(){	# print top index
	awk -v indices="$topindex" 'BEGIN { split(indices, a); } { for (i in a) 
	if (NR == a[i]) { print; if (length(a) == ++count) exit; } }' \
	"$thefile"
}

printin_node(){	# move in, then get same level

	index=$((selected_top))
	awk -v idx=$index -v tab=$tabcount \
	'NR > idx { n = gsub(/\t/, "&"); if (n == tab) 
	{ sub(/^\t+/, ""); print } else exit }' "$thefile"

}


relative(){	# print main, then get all level, exit if tabcount less
	
	index=$((selected_top))
	idxtab=$((tabcount))

	[ "$1" == '--child' ] && index=$((tabline)) && idxtab=$((idxtab+1))

	awk -v idx=$index -v tab=$idxtab \
	'NR==idx { print } NR > idx { n = gsub(/\t/, "&"); if (n >= tab) 
	 print; else exit }' "$thefile"


}


sibling(){	# print main, then get same level, 
	# only print equal tab but exit if less
	index=$((selected_top))
	idxtab=$((tabcount))
	number=0

	[ "$1" == '--child' ] && index=$((tabline)) && idxtab=$((idxtab+1))
	[ "$1" == '-n' ] && number=$((1)) 

	awk -v idx=$index -v tab=$idxtab -v num=$number \
	'NR==idx { print } NR > idx { n = gsub(/\t/, "&"); if (n > tab)
	 next; else if (n == tab){ 
	 	if (num) {print NR, $0} else print;
	 } else exit }' "$thefile"

}


print_level_innode(){	# print level, then sub node 

	index=$((selected_top))
	# color --faint $(awk -v idx=$index 'NR==idx {print $0; exit}' "$item")
	awk -v idx=$index -v tab=$tabcount \
	'NR==idx { print } NR > idx { n = gsub(/\t/, "&"); if (n == tab) 
	print; else exit }' "$thefile"

}


append(){

	thetab=$(sibling | awk -v ln="$2" 'NR==ln  {print; exit}')

	echo "$thetab"

	read -e -p "${BOLD}append ${ARROW} " -i "${old}" newdata

	if [ ! "${newdata}" ]; then
		echo "User Cancel operation.."
		exit 7
	fi

	newdata=$(echo "$thetab"| rg '\t+' -o| warp tail "- $newdata")
	sed -i "/$thetab/s/$/${newdata}\n/" "$thefile"


}

append2(){

	# item=$(next_top -- | awk -v ln="$2" 'NR==ln  {print; exit}')
	item=$(next_top --)
	index=$(echo "$item" | rg "^$2" -o)

	echo "$index"

	# read -e -p "${BOLD}append ${ARROW} " -i "${old}" newdata

	# if [ ! "${newdata}" ]; then
	# 	echo "User Cancel operation.."
	# 	exit 7
	# fi

	# newdata=$(echo "$item"| rg '\t+' -o| warp tail "- $newdata")
	# sed -i "/$item/s/$/${newdata}\n/" "$thefile"


}

home(){

	reset
	print_topindex
	# print_main
	# show $active_index

}


right(){
	# check if next right can increment
	relative --child
}


next_sibling(){

	# if sibling return empty? restore tabline at active_index
	if [ ! "$1" == '--' ];then
		inc_all
	fi

	#--child 
	sibling |rg '-' -n  --passthru  --colors 'match:fg:cyan' --color=ansi | 
	rg '# \w+' --passthru --colors 'match:fg:green'  --color=ansi |
	rg ':\s[a-zA-Z]+' --passthru --colors 'match:fg:white'

}

next_top(){	# print top then print selected child

	if [ ! "$1" == '--' ];then
		inc_all
	fi

	item1=$(awk \
	 	'{ n = gsub(/\t/, "&"); if (n == 0) {print NR, $0} }' "$thefile")

	item2=$(awk -v idx=$selected_top -v tab=$tabcount \
		'NR > idx { n = gsub(/\t/, "&"); if (n > tab)
		 next; else if (n == tab) {print NR, $0} else exit }' "$thefile")

	echo -e "${item1}\n" | awk -v idx=$((active_index+1)) -v items="$item2" \
	'NR == idx {print items}1' 

}

next(){

	inc_all
	# show $active_index
	relative

}


prev(){
	dec_index
	set_selected
	tabline=$((selected_top))
	# show $active_index
	relative
}


inc_all(){

	inc_index
	set_selected
	tabline=$((selected_top))

}

set_selected(){
	selected_top=$(echo "$topindex" | cut -d ' ' -f"$active_index")
}


inc_index(){
	count=$(wc -w <<<"$topindex")
	active_index=$(( active_index % count + 1 ))

	# echo "$active_index"
}

dec_index(){
	count=$(wc -w <<<"$topindex")
	active_index=$(( (active_index + count - 2) % count + 1 ))
	# echo "$active_index"
}

inc_tab(){
	tabcount=$((tabcount+1))
	tabline=$((active_index + 1))
}

dec_tab(){
  if (( tabcount > 1 )); then
    tabcount=$((tabcount-1))
  fi
  if (( tabline > 1 )); then
    tabline=$((tabline-1))
  fi

}

inc_tabline(){
	awk -v top=$((selected_top)) -v tline=$((tabline)) -v tab=$((tabcount)) \
	'NR > tline { n = gsub(/\t/, "&"); if (n > tab) 
	 next; else if (n == tab) { print NR; exit } 
	else { print top+1;exit } }' "$thefile"
}


reset_tab(){
	tabcount=1
}

gen_tab(){
	[ "$tabcount" -eq 0 ] && printf '' && return
	printf '\t%.0s' $(seq 1 "$tabcount")
}



db(){
	st open "$thefile"
}

dbvar(){
	st open "$(varmem get_file $tree_varname)"
}


info(){
	echo "topindex	" "$topindex"
	echo "active_index	" "$active_index"
	echo "selected_top	" "$selected_top"
	echo "tabcount	" "$tabcount"
	echo "tabline		" "$tabline"
}


reset(){
	active_index=1
	selected_top=1
	tabcount=1
	tabline=1
}


on_exit(){
	save_var	
}

trap on_exit EXIT

"$1" "$@"