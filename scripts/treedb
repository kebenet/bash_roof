#!/bin/bash
#TITLE! read tab as tree for editing

thefile="$TT_VAR/tree_structure.ttdb"
topindex=$(rg -n "^#\s\w+" "$thefile" | cut -d: -f1| tr '\n' ' '| warp trim)
tree_varname='tree_info'
tree_info=$(varmem get "$tree_varname")
# tabchar=

IFS=: read -r active_index selected_top tabcount tabline <<< "$tree_info"

save_var(){
	item="${active_index:-1}:${selected_top:-1}:${tabcount:-1}:${tabline:-1}"
	varmem set "$tree_varname" "$item"
}

show(){

	last=${!#}
	[[ ! $last =~ ^[0-9]+$ ]] && active_index=1
	
	inc_selected

	# title
	item=$(sed -n "${selected_top}p;${selected_top}q" "$thefile")
	color --faint "$item"

	index=$(rg -n "^$item" "$thefile" | cut -d: -f1)

	index=$((index+1))

	# show by title and tab index
	showby_index $index
}



showby_index(){
	range print "$1" '$' "$thefile" | 
	awk -v count="$tabcount" -F'\t' '{if(NF!=count+1) exit; print $0}'
}



#=================print!=================

print_level(){	# get same level, no exit
	index=$((selected_top))
	awk -v idx=$index -v tab=$tabcount \
	'{ n = gsub(/\t/, "&"); if (n == tab-1)
	print; }' "$thefile"
}

printin_node(){	# move in, then get same level
	index=$((selected_top))
	awk -v idx=$index -v tab=$tabcount \
	'NR > idx { n = gsub(/\t/, "&"); if (n == tab) 
	{ sub(/^\t+/, ""); print } else exit }' "$thefile"
}



relative(){	# print main, then get all level, exit if tabcount less
	
	index=$((selected_top))
	[ "$1" == '--tab' ] && index=$((tabline))

	awk -v idx=$index -v tab=$tabcount \
	'NR==idx { print } NR > idx { n = gsub(/\t/, "&"); if (n >= tab) 
	 print; else exit }' "$thefile"
}


sibling(){	# print main, then get same level, 
	# only print equal tab but exit if less
	index=$((selected_top))
	[ "$1" == '--tab' ] && index=$((tabline))

	awk -v idx=$index -v tab=$tabcount \
	'NR==idx { print } NR > idx { n = gsub(/\t/, "&"); if (n > tab) 
	 next; else if (n == tab) print; else exit }' "$thefile"

}


print_level_innode(){	# print level, then sub node 
	index=$((selected_top))
	# color --faint $(awk -v idx=$index 'NR==idx {print $0; exit}' "$item")
	awk -v idx=$index -v tab=$tabcount \
	'NR==idx { print } NR > idx { n = gsub(/\t/, "&"); if (n == tab) 
	print; else exit }' "$thefile"
}

home(){
	reset
	show $active_index
}

right(){
	# check if next right can increment
	relative --tab
}

next_sibling(){
	# if sibling return empty? restore tabline at active_index

	index=$((selected_top))
	[ "$1" == '--tab' ] && index=$((tabline))
	inc=$(awk -v top=$selected_top -v tline=$tabline -v tab=$tabcount \
		'NR > tline { n = gsub(/\t/, "&"); if (n > tab) 
		 next; else if (n == tab) print {NR-tline; exit} else { print top+1;exit } }' "$thefile")
	tabline=$((tabline + inc))
	echo $inc
	sibling --tab
}

next(){
	inc_index
	show $active_index
}


prev(){
	dec_index
	show $active_index
}


inc_selected(){
	selected_top=$(echo "$topindex" | cut -d ' ' -f"$active_index")
}


inc_index(){
	count=$(wc -w <<<"$topindex")
	active_index=$(( active_index % count + 1 ))
	# echo "$active_index"
}

dec_index(){
	count=$(wc -w <<<"$topindex")
	active_index=$(( (active_index + count - 2) % count + 1 ))
	# echo "$active_index"
}

inc_tab(){
	tabcount=$((tabcount+1))
	tabline=$((active_index + 1))
}

dec_tab(){
  if (( tabcount > 1 )); then
    tabcount=$((tabcount-1))
  fi
  if (( tabline > 1 )); then
    tabline=$((tabline-1))
  fi

}


reset_tab(){
	tabcount=1
}

gen_tab(){
	[ "$tabcount" -eq 0 ] && printf '' && return
	printf '\t%.0s' $(seq 1 "$tabcount")
}



db(){
	st open "$thefile"
}

dbvar(){
	st open "$(varmem get_file $tree_varname)"
}


info(){
	echo "active_index	" "$active_index"
	echo "selected_top	" "$selected_top"
	echo "tabcount	" "$tabcount"
	echo "tabline		" "$tabline"
}


reset(){
	active_index=1
	selected_top=1
	tabcount=1
}


on_exit(){
	save_var	
}

trap on_exit EXIT

"$1" "$@"